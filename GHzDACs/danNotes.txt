Server - Run Sequence
    devs = [devices in daisy chain order]
    runners = [runner(dev) for dev in devs]
        defaults for DAC: mem = None
                          sram = None
                          startDelay = 0
        defaults for ADC: None, errors raised if things not set
        DacRunner(dev, reps, startDelay, mem, sram):
            self._fixDualBlockSram()
            if self.pageable(): truncate sram to fit in one page
            self.nPackets = calculate expected number of data packets
            self.memTime = time in seconds of one memory sequence, assumes SRAM is 12us
            self.seqTime = TIMEOUT_FACTOR * (memTime * reps) + 1
        AdcRunner(dev, reps, runMode, startDelay, filter, channels)
            self.runMode = string representing run mode "demodulate" or "average"
            self.mode = number indicating run mode for register packet
            self.seqTime = TIMEOUT_FACTOR * (26us * reps) + 1
    timingOrder = c['timing_order'], some logic here
    while 1:
        try:
            ans = yield bg.run(runners, reps, setupReqs, set(setupState), c['master_sync'], getTimingData, timingOrder)
        except TimeoutError, err:
            log err to file and stdout
            attempt += 1
        if attempt >= retries:
            raise

Board group - run
    if not all runners pageable: get both page locks
    pkts = self.makePackets(runners, page, reps, timingOrder, sync)
        runnerInfo = dict(<board name>:<runner object>)
        loadpkts - load memory and SRAM for DAC. None for ADC.
            Add delays before all SRAM calls on master board only.
            Recompute memTime and seqTime
        setupPkts - WHAT IS THIS AND WHY ISN'T IT THE SAME AS LOADPKTS? Filter function definition seems messed up.
        runPkts - makes three packets for direct ethernet, run, wait, and both.
            run - send all register packets to boards
            wait - wait for 0 triggers
            both - wait for 0 triggers and then send all register packets to boards            
        collectPkts - list of packets, one for each board
            Wait for this board's nPackets to come into direct ethernet
            Then send a trigger to the board group main context
            If a timeout occurs while waiting for packets to come in, trigger not sent
        readPkts - list of packets, one for each board
            If this board is in the timingOrder read nPackets from direct_ethernet
            otherwise discard
        #Note that all packets are sent in each board's individual direct ethernet context, EXCEPT for
        #the run packets. Those are sent by the master context.
    