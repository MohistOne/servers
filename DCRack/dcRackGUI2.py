import sysimport labradfrom PyQt4 import QtCore,QtGui,uicwith labrad.connect() as cxn:    try:        dc = cxn.dc_rack_server    except:        print 'dc rack server inopperable'            class TestWindow (QtGui.QMainWindow):        def __init__(self):            QtGui.QMainWindow.__init__(self)            ui_class, widget_class = uic.loadUiType("dcRackGUI2.ui")            self.ui = ui_class()            self.ui.setupUi(self)            self.cardList = []            self.ui.dbus0ChannelSelect.setEnabled(False)            self.ui.dbus1ChannelSelect.setEnabled(False)            self.ui.abus0ChannelSelect.setEnabled(False)            self.ui.abus1ChannelSelect.setEnabled(False)            self.ui.FOoutSwitch.setEnabled(False)            self.ui.FOflashSwitch.setEnabled(False)            self.ui.regLoadFlashSwitch.setEnabled(False)            self.ui.dbus0Switch.setEnabled(False)            self.ui.dbus1Switch.setEnabled(False)            self.ui.abus0Switch.setEnabled(False)            self.ui.abus1Switch.setEnabled(False)            self.changePreampControls(False)            self.monState = []            self.isConnected = False            self.show()        def changePreampControls(self, boolean):            self.ui.AHighPassSelect.setEnabled(boolean)            self.ui.ALowPassSelect.setEnabled(boolean)            self.ui.APolaritySelect.setEnabled(boolean)            self.ui.AOffsetSelect.setEnabled(boolean)            self.ui.AofsOutSelect.setEnabled(boolean)            self.ui.BHighPassSelect.setEnabled(boolean)            self.ui.BLowPassSelect.setEnabled(boolean)            self.ui.BPolaritySelect.setEnabled(boolean)            self.ui.BOffsetSelect.setEnabled(boolean)            self.ui.BofsOutSelect.setEnabled(boolean)            self.ui.CHighPassSelect.setEnabled(boolean)            self.ui.CLowPassSelect.setEnabled(boolean)            self.ui.CPolaritySelect.setEnabled(boolean)            self.ui.COffsetSelect.setEnabled(boolean)            self.ui.CofsOutSelect.setEnabled(boolean)            self.ui.DHighPassSelect.setEnabled(boolean)            self.ui.DLowPassSelect.setEnabled(boolean)            self.ui.DPolaritySelect.setEnabled(boolean)            self.ui.DOffsetSelect.setEnabled(boolean)            self.ui.DofsOutSelect.setEnabled(boolean)        def updateChannel(self, channel, hp, lp, pol, off):            highPass = {'DC':0,'3300':1,'1000':2,'330':3,'100':4,'33':5,'10':6,'3.3':7}[hp]            lowPass = {'0':0,'0.22':1,'0.5':2,'1.0':3,'2.2':4,'5':5,'10':6,'22':7}[lp]            polarity = {'positive':0,'negative':1}[pol]            if channel == 'A':                self.ui.AHighPassSelect.setCurrentIndex(highPass)                self.ui.ALowPassSelect.setCurrentIndex(lowPass)                self.ui.APolaritySelect.setCurrentIndex(polarity)                self.ui.AOffsetSelect.setValue(off)                self.ui.AofsOutSelect.setValue(off)            if channel == 'B':                self.ui.BHighPassSelect.setCurrentIndex(highPass)                self.ui.BLowPassSelect.setCurrentIndex(lowPass)                self.ui.BPolaritySelect.setCurrentIndex(polarity)                self.ui.BOffsetSelect.setValue(off)                self.ui.BofsOutSelect.setValue(off)            if channel == 'C':                self.ui.CHighPassSelect.setCurrentIndex(highPass)                self.ui.CLowPassSelect.setCurrentIndex(lowPass)                self.ui.CPolaritySelect.setCurrentIndex(polarity)                self.ui.COffsetSelect.setValue(off)                self.ui.CofsOutSelect.setValue(off)            if channel == 'D':                self.ui.DHighPassSelect.setCurrentIndex(highPass)                self.ui.DLowPassSelect.setCurrentIndex(lowPass)                self.ui.DPolaritySelect.setCurrentIndex(polarity)                self.ui.DOffsetSelect.setValue(off)                self.ui.DofsOutSelect.setValue(off)        def updateBus(self, channel, cardNumber, state):            if channel == 'Dbus0':                self.ui.dbus0CardNumber.setValue(int(cardNumber))                index = {'trigA':  0, 'trigB': 1, 'trigC':  2, 'trigD': 3,                         'foin1':  0, 'foin2': 1, 'foin3':  2, 'foin4': 3,                         'dadata': 4, 'done':  5, 'strobe': 6, 'clk': 7,                         'on1': 4, 'on2': 5, 'on3': 6, 'on4': 7}[state]                self.ui.dbus0ChannelSelect.setCurrentIndex(index)                            if channel == 'Dbus1':                self.ui.dbus1CardNumber.setValue(int(cardNumber))                index = {'FOoutA': 0, 'FOoutB':  1, 'FOoutC': 2, 'FOoutD':  3,                         'Pbus0': 0, 'clk':  1, 'clockon': 2, 'cardsel':  3,                         'dasyn':  4, 'cardsel': 5, 'Pbus0':  6, 'Clockon': 7,                         'clk1': 4, 'clk2': 5, 'clk3':  6, 'clk4': 7}[state]                self.ui.dbus1ChannelSelect.setCurrentIndex(index)                            if channel == 'Abus0':                self.ui.abus0CardNumber.setValue(int(cardNumber))                index = {'A0': 0, 'B0': 1, 'C0': 2, 'D0': 3}[state]                self.ui.abus0ChannelSelect.setCurrentIndex(index)                            if channel == 'Abus1':                self.ui.abus1CardNumber.setValue(int(cardNumber))                index = {'A1': 0, 'B1': 1, 'C1': 2, 'D1': 3}[state]                self.ui.abus1ChannelSelect.setCurrentIndex(index)                                @QtCore.pyqtSlot(str)        def on_deviceNameField_currentIndexChanged(self, string):            try:                dc.select_device(str(string))                self.isConnected = True                self.cardList = dc.list_cards()                self.monState = dc.get_monitor_state()                if self.monState[0][0] != '0':                    self.ui.dbus0Switch.setChecked(True)                    self.updateBus('Dbus0', self.monState[0][0],self.monState[0][1])                else:                    self.updateBus('Dbus0', '0','trigA')                if self.monState[1][0] != '0':                    self.ui.dbus1Switch.setChecked(True)                    self.updateBus('Dbus1', self.monState[1][0],self.monState[1][1])                else:                    self.updateBus('Dbus1','0','FOoutA')                if self.monState[2][0] != '0':                    self.ui.abus0Switch.setChecked(True)                    self.updateBus('Abus0', self.monState[2][0],self.monState[2][1])                else:                     self.updateBus('Abus0','0','A0')                if self.monState[3][0] != '0':                    self.ui.abus1Switch.setChecked(True)                    self.updateBus('Abus1', self.monState[3][0],self.monState[3][1])                else:                    self.updateBus('Abus1','0','A1')                self.ui.dbus0Switch.setEnabled(True)                self.ui.dbus1Switch.setEnabled(True)                self.ui.abus0Switch.setEnabled(True)                self.ui.abus1Switch.setEnabled(True)            except:                print 'device connection error'                self.isConnected = False                self.updateBus('Dbus0','0','trigA')                self.updateBus('Dbus1','0','FOoutA')                self.updateBus('Abus0','0','A0')                self.updateBus('Abus1','0','A1')                self.isConnected = False                self.ui.dbus0Switch.setEnabled(False)                self.ui.dbus1Switch.setEnabled(False)                self.ui.abus0Switch.setEnabled(False)                self.ui.abus1Switch.setEnabled(False)            self.ui.selectCardField.setValue(0)                    @QtCore.pyqtSlot(int)        def on_dbus0CardNumber_valueChanged(self, value):            newCard = str(value)            for card in self.cardList:                if card[0] == newCard:                    self.ui.dbus0ChannelSelect.setEnabled(True)                    if card[1] == 'preamp':                        self.ui.dbus0CardType.setCurrentIndex(1)                        self.ui.dbus0ChannelSelect.clear()                        self.ui.dbus0ChannelSelect.addItem('trigA')                        self.ui.dbus0ChannelSelect.addItem('trigB')                        self.ui.dbus0ChannelSelect.addItem('trigC')                        self.ui.dbus0ChannelSelect.addItem('trigD')                        self.ui.dbus0ChannelSelect.addItem('dadata')                        self.ui.dbus0ChannelSelect.addItem('done')                        self.ui.dbus0ChannelSelect.addItem('strobe')                        self.ui.dbus0ChannelSelect.addItem('clk')                    else:                        self.ui.dbus0CardType.setCurrentIndex(2)                        self.ui.dbus0ChannelSelect.clear()                        self.ui.dbus0ChannelSelect.addItem('foin1')                        self.ui.dbus0ChannelSelect.addItem('foin2')                        self.ui.dbus0ChannelSelect.addItem('foin3')                        self.ui.dbus0ChannelSelect.addItem('foin4')                        self.ui.dbus0ChannelSelect.addItem('on1')                        self.ui.dbus0ChannelSelect.addItem('on2')                        self.ui.dbus0ChannelSelect.addItem('on3')                        self.ui.dbus0ChannelSelect.addItem('on4')                    break                else:                    self.ui.dbus0ChannelSelect.setEnabled(False)                    self.ui.dbus0CardType.setCurrentIndex(0)                    self.ui.dbus0ChannelSelect.clear()                    if self.isConnected:                        dc.select_card(0)                        dc.change_monitor('Dbus0','foin1')        @QtCore.pyqtSlot(int)        def on_dbus1CardNumber_valueChanged(self, value):            newCard = str(value)            for card in self.cardList:                if card[0] == newCard:                    self.ui.dbus1ChannelSelect.setEnabled(True)                    if card[1] == 'preamp':                        self.ui.dbus1CardType.setCurrentIndex(1)                        self.ui.dbus1ChannelSelect.clear()                        self.ui.dbus1ChannelSelect.addItem('FOoutA')                        self.ui.dbus1ChannelSelect.addItem('FOoutB')                        self.ui.dbus1ChannelSelect.addItem('FOoutC')                        self.ui.dbus1ChannelSelect.addItem('FOoutD')                        self.ui.dbus1ChannelSelect.addItem('dasyn')                        self.ui.dbus1ChannelSelect.addItem('cardsel')                        self.ui.dbus1ChannelSelect.addItem('Pbus0')                        self.ui.dbus1ChannelSelect.addItem('Clockon')                    else:                        self.ui.dbus1CardType.setCurrentIndex(2)                        self.ui.dbus1ChannelSelect.clear()                        self.ui.dbus1ChannelSelect.addItem('Pbus0')                        self.ui.dbus1ChannelSelect.addItem('clk')                        self.ui.dbus1ChannelSelect.addItem('clockon')                        self.ui.dbus1ChannelSelect.addItem('cardsel')                        self.ui.dbus1ChannelSelect.addItem('clk1')                        self.ui.dbus1ChannelSelect.addItem('clk2')                        self.ui.dbus1ChannelSelect.addItem('clk3')                        self.ui.dbus1ChannelSelect.addItem('clk4')                    break                else:                    self.ui.dbus1ChannelSelect.setEnabled(False)                    self.ui.dbus1CardType.setCurrentIndex(0)                    self.ui.dbus1ChannelSelect.clear()                    if self.isConnected:                        dc.select_card(0)                        dc.change_monitor('Dbus1','Pbus0')        @QtCore.pyqtSlot(int)        def on_abus0CardNumber_valueChanged(self, value):            newCard = str(value)            for card in self.cardList:                if card[0] == newCard:                    self.ui.abus0ChannelSelect.setEnabled(True)                    self.ui.abus0ChannelSelect.addItem('A')                    self.ui.abus0ChannelSelect.addItem('B')                    self.ui.abus0ChannelSelect.addItem('C')                    self.ui.abus0ChannelSelect.addItem('D')                    if card[1] == 'preamp':                        self.ui.abus0CardType.setCurrentIndex(1)                    else:                        self.ui.abus0CardType.setCurrentIndex(2)                    break                else:                    self.ui.abus0ChannelSelect.setEnabled(False)                    self.ui.abus0CardType.setCurrentIndex(0)                    self.ui.abus0ChannelSelect.clear()                    if self.isConnected:                        dc.select_card(0)                        dc.change_monitor('Abus0','A0')        @QtCore.pyqtSlot(int)        def on_abus1CardNumber_valueChanged(self, value):            newCard = str(value)            for card in self.cardList:                if card[0] == newCard:                    self.ui.abus1ChannelSelect.setEnabled(True)                    self.ui.abus1ChannelSelect.addItem('A')                    self.ui.abus1ChannelSelect.addItem('B')                    self.ui.abus1ChannelSelect.addItem('C')                    self.ui.abus1ChannelSelect.addItem('D')                    if card[1] == 'preamp':                        self.ui.abus1CardType.setCurrentIndex(1)                    else:                        self.ui.abus1CardType.setCurrentIndex(2)                    break                else:                    self.ui.abus1ChannelSelect.setEnabled(False)                    self.ui.abus1CardType.setCurrentIndex(0)                    self.ui.abus1ChannelSelect.clear()                    if self.isConnected:                        dc.select_card(0)                        dc.change_monitor('Abus1','A1')                        @QtCore.pyqtSlot(str)        def on_dbus0ChannelSelect_currentIndexChanged(self, string):            if (self.ui.dbus0ChannelSelect.isEnabled())&(self.ui.dbus0Switch.checkState() == 2):                command = str(string)                if (command != '')&(self.isConnected):                    dc.select_card(self.ui.dbus0CardNumber.value())                    dc.change_monitor('Dbus0',command)        @QtCore.pyqtSlot(str)        def on_dbus1ChannelSelect_currentIndexChanged(self, string):            if (self.ui.dbus1ChannelSelect.isEnabled())&(self.ui.dbus1Switch.checkState() == 2):                command = str(string)                if (command != '')&(self.isConnected):                    dc.select_card(self.ui.dbus1CardNumber.value())                    dc.change_monitor('Dbus1',command)        @QtCore.pyqtSlot(str)        def on_abus0ChannelSelect_currentIndexChanged(self, string):            if (self.ui.abus0ChannelSelect.isEnabled())&(self.ui.abus0Switch.checkState() == 2):                command = str(string)                if self.isConnected:                    dc.select_card(self.ui.abus0CardNumber.value())                    dc.change_monitor('Abus0',command+'0')        @QtCore.pyqtSlot(str)        def on_abus1ChannelSelect_currentIndexChanged(self, string):            if (self.ui.abus1ChannelSelect.isEnabled())&(self.ui.abus1Switch.checkState() == 2):                command = str(string)                if self.isConnected:                    dc.select_card(self.ui.abus1CardNumber.value())                    dc.change_monitor('Abus1',command+'1')                    @QtCore.pyqtSlot(int)        def on_selectCardField_valueChanged(self, value):            newCard = str(value)            for card in self.cardList:                if card[0] == newCard:                    self.ui.FOoutSwitch.setEnabled(True)                    self.ui.FOflashSwitch.setEnabled(True)                    self.ui.regLoadFlashSwitch.setEnabled(True)                    if card[1] == 'preamp':                        self.ui.cardType.setCurrentIndex(1)                        self.changePreampControls(True)                        channelA = dc.get_preamp_state(newCard, 'A')                        self.updateChannel('A',channelA[0],channelA[1],channelA[2],int(channelA[3]))                        channelB = dc.get_preamp_state(newCard, 'B')                        self.updateChannel('B',channelB[0],channelB[1],channelB[2],int(channelB[3]))                        channelC = dc.get_preamp_state(newCard, 'C')                        self.updateChannel('C',channelC[0],channelC[1],channelC[2],int(channelC[3]))                        channelD = dc.get_preamp_state(newCard, 'D')                        self.updateChannel('D',channelD[0],channelD[1],channelD[2],int(channelD[3]))                    else:                        self.ui.cardType.setCurrentIndex(2)                        self.changePreampControls(False)                    break                else:                    self.ui.FOoutSwitch.setEnabled(False)                    self.ui.FOflashSwitch.setEnabled(False)                    self.ui.regLoadFlashSwitch.setEnabled(False)                    self.changePreampControls(False)                    self.ui.cardType.setCurrentIndex(0)                    self.updateChannel('A','DC','0','positive',0)                    self.updateChannel('B','DC','0','positive',0)                    self.updateChannel('C','DC','0','positive',0)                    self.updateChannel('D','DC','0','positive',0)        @QtCore.pyqtSlot(str)        def on_AHighPassSelect_currentIndexChanged(self, string):            if (self.ui.AHighPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_high_pass_filter('A', command)                    @QtCore.pyqtSlot(str)        def on_ALowPassSelect_currentIndexChanged(self, string):            if (self.ui.ALowPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_low_pass_filter('A', command)        @QtCore.pyqtSlot(str)        def on_APolaritySelect_currentIndexChanged(self, string):            if (self.ui.APolaritySelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_polarity('A', command)        @QtCore.pyqtSlot(int)        def on_AOffsetSelect_valueChanged(self, value):            if (self.ui.AOffsetSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('A', value)        @QtCore.pyqtSlot(int)        def on_AofsOutSelect_valueChanged(self, value):            if (self.ui.AofsOutSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('A', value)        @QtCore.pyqtSlot(str)        def on_BHighPassSelect_currentIndexChanged(self, string):            if (self.ui.BHighPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_high_pass_filter('B', command)                    @QtCore.pyqtSlot(str)        def on_BLowPassSelect_currentIndexChanged(self, string):            if (self.ui.BLowPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_low_pass_filter('B', command)        @QtCore.pyqtSlot(str)        def on_BPolaritySelect_currentIndexChanged(self, string):            if (self.ui.BPolaritySelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_polarity('B', command)        @QtCore.pyqtSlot(int)        def on_BOffsetSelect_valueChanged(self, value):            if (self.ui.BOffsetSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('B', value)        @QtCore.pyqtSlot(int)        def on_BofsOutSelect_valueChanged(self, value):            if (self.ui.BofsOutSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('B', value)        @QtCore.pyqtSlot(str)        def on_CHighPassSelect_currentIndexChanged(self, string):            if (self.ui.CHighPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_high_pass_filter('C', command)                    @QtCore.pyqtSlot(str)        def on_CLowPassSelect_currentIndexChanged(self, string):            if (self.ui.CLowPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_low_pass_filter('C', command)        @QtCore.pyqtSlot(str)        def on_CPolaritySelect_currentIndexChanged(self, string):            if (self.ui.CPolaritySelect.isEnabled())&(self.isConnected):                 dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_polarity('C', command)        @QtCore.pyqtSlot(int)        def on_COffsetSelect_valueChanged(self, value):             if (self.ui.COffsetSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('C', value)        @QtCore.pyqtSlot(int)        def on_CofsOutSelect_valueChanged(self, value):             if (self.ui.CofsOutSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('C', value)        @QtCore.pyqtSlot(str)        def on_DHighPassSelect_currentIndexChanged(self, string):            if (self.ui.DHighPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_high_pass_filter('D', command)                    @QtCore.pyqtSlot(str)        def on_DLowPassSelect_currentIndexChanged(self, string):            if (self.ui.DLowPassSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_low_pass_filter('D', command)        @QtCore.pyqtSlot(str)        def on_DPolaritySelect_currentIndexChanged(self, string):            if (self.ui.DPolaritySelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                command = str(string)                dc.change_polarity('D', command)        @QtCore.pyqtSlot(int)        def on_DOffsetSelect_valueChanged(self, value):            if (self.ui.DOffsetSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('D', value)        @QtCore.pyqtSlot(int)        def on_DofsOutSelect_valueChanged(self, value):           if (self.ui.DofsOutSelect.isEnabled())&(self.isConnected):                dc.select_card(self.ui.selectCardField.value())                dc.change_dc_offset('D', value)        @QtCore.pyqtSlot(int)        def on_dbus0Switch_stateChanged(self, value):            if value == 0:                dc.select_card(0)                dc.change_monitor('Dbus0','trigA')            else:                if str(self.ui.dbus0ChannelSelect.currentText())=='':                    dc.select_card(0)                    dc.change_monitor('Dbus0','trigA')                else:                    dc.select_card(self.ui.dbus0CardNumber.value())                    dc.change_monitor('Dbus0',str(self.ui.dbus0ChannelSelect.currentText()))        @QtCore.pyqtSlot(int)        def on_dbus1Switch_stateChanged(self, value):            if value == 0:                dc.select_card(0)                dc.change_monitor('Dbus1','FOoutA')            else:                if str(self.ui.dbus1ChannelSelect.currentText())=='':                    dc.select_card(0)                    dc.change_monitor('Dbus1','FOoutA')                else:                    dc.select_card(self.ui.dbus1CardNumber.value())                    dc.change_monitor('Dbus1',str(self.ui.dbus1ChannelSelect.currentText()))        @QtCore.pyqtSlot(int)        def on_abus0Switch_stateChanged(self, value):            if value == 0:                dc.select_card(0)                dc.change_monitor('Abus0','A0')            else:                if str(self.ui.abus0ChannelSelect.currentText())=='':                    dc.select_card(0)                    dc.change_monitor('Abus0','A0')                else:                    dc.select_card(self.ui.abus0CardNumber.value())                    dc.change_monitor('Abus0',str(self.ui.abus0ChannelSelect.currentText())+'0')        @QtCore.pyqtSlot(int)        def on_abus1Switch_stateChanged(self, value):            if value == 0:                dc.select_card(0)                dc.change_monitor('Abus1','A1')            else:                if str(self.ui.abus1ChannelSelect.currentText())=='':                    dc.select_card(0)                    dc.change_monitor('Abus1','A1')                else:                    dc.select_card(self.ui.abus1CardNumber.value())                    dc.change_monitor('Abus1',str(self.ui.abus1ChannelSelect.currentText())+'1')        @QtCore.pyqtSlot(int)        def on_FOoutSwitch_stateChanged(self, value):            if value == 0:                FOout = False            else:                FOout = True            if self.ui.FOflashSwitch.checkState() == 0:                FOflash = False            else:                FOflash = True            if self.ui.regLoadFlashSwitch.checkState() == 0:                regFlash = False            else:                regFlash = True            if self.isConnected:                dc.select_card(self.ui.selectCardField.value())                dc.leds(FOout,FOflash,regFlash)        @QtCore.pyqtSlot(int)        def on_FOflashSwitch_stateChanged(self, value):            if self.ui.FOoutSwitch.checkState() == 0:                FOout = False            else:                FOout = True            if value == 0:                FOflash = False            else:                FOflash = True            if self.ui.regLoadFlashSwitch.checkState() == 0:                regFlash = False            else:                regFlash = True            if self.isConnected:                dc.select_card(self.ui.selectCardField.value())                dc.leds(FOout,FOflash,regFlash)        @QtCore.pyqtSlot(int)        def on_regLoadFlashSwitch_stateChanged(self, value):            if self.ui.FOoutSwitch.checkState() == 0:                FOout = False            else:                FOout = True            if self.ui.FOflashSwitch.checkState() == 0:                FOflash = False             else:                FOflash = True            if value == 0:                regFlash = False            else:                regFlash = True            if self.isConnected:                dc.select_card(self.ui.selectCardField.value())                dc.leds(FOout,FOflash,regFlash)                        @QtCore.pyqtSlot()        def on_initDACVoltagRef_clicked(self):            if self.isConnected:                dc.init_dacs()            app = QtGui.QApplication(sys.argv)    window = TestWindow()    sys.exit(app.exec_())